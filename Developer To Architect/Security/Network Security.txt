Security
--

Few concept of Keys and Encryption

Encryption is a technique to make our data confidential as in a network, everything is public and while sending any data from the client
to server, it can be viewed and intercepted by any middle man. So to have confidentiality of the data, we use different approaches
The approaches are,
  1) Symmetric Key Envryption
     .In this approach the client and the server share the same key (set of characters that is encrypte using any algorithm) and that key
	  is used to secure our data
	 .This approach is fine when we have limited trusted clients. It is fast and easy to implement
	 .The limitation with this approach is if we have number of clients and anyone can connect to our server then we cannot trust everyone
	  client and our key can be leaked for purposes.
  2) Asymmetric Key Encruption
     .In this approach, we have a pair of keys known as private and public key. These keys are derived from the same information and they
	  exist in pair which means that one key owns the other.
	 .Public key is to be shared by the world and private key is to be kept secret within a system
	 .Information encrypted by one key can only be decrypred by other key. It cannot be decrypted by the same key otherwise it would become
	  same as symmetric key encryption.
	 .If a certain information is encrypted using private key and sent to any user, then that information can be decrypted only by that 
	  public key which ensures that the message is sent by a particular sender (Authenticated - Proves Ones identity)
	 .If a certain information is encrypted using public key and sent to any user, then that information can be decrypted only by that 
	  private key which ensures that the message can only be decrypted by the intended user.
	  
	
The algorithms related to symmetric encryption is way faster than algorithms associated with asymmetric encryption.
	
Exchanging of Keys
  .The client and server exchange the keys using asymmetric encryption and the rest of the communication is done via symmetric encryption
  .When the browser initiates HTTPs requests to the server, the server first respond back with the certificate which includes its public
   key
  .In the next step as part of the request, the client (browser) generates a symmetric key, encrypt it with server's public key and send
   that key to the server over the network. That encrypted key can now only be decrypted by the server because server has its provate key
  .The server decrypts it and gets the symmetric key generated by the client
  .Now the communication can take place using the exchanged symmetric key.
  
Besides public private key encryption, hashing is also an important part of cryptography and widely used in digital signratures and digital
certificates where the server proves its identity to the client.
Properties of Hashing are,
  1) Generates same output for same input (we can use salted value as a parameter to generate different value)
  2) One way algorithm
  3) Slight change in text can change the whole digest
Popular hashing algorithms are
  1) MD5 (128 bits and has a has collision vulneberality)
  2) SHA-1 (160 bits)
  3) SHA-256 / SHA-512 (Modern day used)
  4) Bcrypt
  

SHA-256 is a 256-bit hash function, which means that the hash output is a 256-bit string. It is practically impossible to brute-force all 
possible 2^256 combinations to find the original input text. Similarly, bcrypt uses a work factor that can be configured to increase the 
computational cost of the hash function, making it much more difficult to perform a brute-force attack.
  
To represent the output in a human-readable format, such as in hexadecimal or base64 encoding, the output string will be longer. 
For example, in hexadecimal encoding, each byte of the output is represented by two hexadecimal digits, so the output string of a SHA-256 
hash in hexadecimal format will be 64 characters long. In base64 encoding, each 6 bits of the output is represented by one character, so 
the output string of a SHA-256 hash in base64 format will be 44 characters long.

Related to hashing, there are Digital Signatures and Digital Ceritifactes
Digital Signatures is a way to ensure the authenticity and integrity of a message means that a certain piece of information is sent by
valid user and the information is not tempered. Tha way it works is.
  .If the data is needed to be digitally signed and sent over the network then there are few steps for it
  .First the whole data will be hashed using any algorithm and that hash value will be encrypted using the sender's private key
  .The hash value and the certificate will be attach with the original data and in this way the data is said to be digitally signed.
  .When the data will be received at receiver's end, the receiver will separate out the data and the hash value
  .The receiver will take the hash of the data by using the same algorithm sender used (the algorithm type also sent using the hashed
   information) and will decrypt the received hash using sender's public key
  .The receiver will then match the 2 hash values and if it is same then it means data is not tempered and received from authenticates sender
  .If the hash values are different then it means something bad has happended during data transmission over the network.
  
Over to Digital Certificates, we know that in order for clients to communicate with the server securely (using SSL/TLS), the server will
have to share its public key to the client and digital certificate is one way of sharing that public key in a trusted manner
Not only the certificate includes the public key but it also includes other information like publuc key owner, their organization, address,
validity of certificate, and also the digital signtaure of the certificate authority.
Here is how it works,
  .If a certain person wants to register a certificate, he will contact any well known certificate authority and provide the relevant
   information.
  .The information includes organizaiton name, address, country, public key generated to be used by the server
  .The certificate authority will create a certificate with all its information including its validity and digitally signed it. The
   certificate authority will do the same thing like it will take the whole certificate hash and encrypt it using its private key and attach
   that value to the certificate and send back the certificate to the person who has requested it
  .Now when any client (browser or any other) wants to communicate with the server in a secure way, the server will send back the certificate
   to the client which will be downloaded by them. The client will now verify the certificate
  .The verificate process includes several things. Few things are,
     a) Checking certificate validity
	 b) Decrypt the digitally signed value using certificate authority public key. These public keys of populat certificate authority are 
	    already present inside the operating system. The hash will be retrieved. Now client will take the certificate data hash and match it
        with received hash which will make sure that the certificate is valid.

In Digital Certificate what normally happens is that we have a Root CA which is the popular one like Google. It has given some rights
to other tier to distribute the certificates can be called as Tier 1 CA. Tier 1 CAs can also give rights to other tier to distribute
certificates can be called as Tier 2. So in this way a whole hierarchy can be build up. An organization can register its certificate
from Tier 1 lets suppose. The browser when want to communicate a secure channel with the server, the server will send back the certificate
which will include the organization name, address, country, server's public key, etc and also the digital signature of Tier 1. 
To verigy that signature we need to have Tier 1 CA public key which we dont have and we dont trust it. SO this certificate will reference
another certificate that was registered by Tier 1 from the Root CA. This certificate will include Tier 1 name, address, country, Tier 1
public key and the Root CA digital signature. This Tier 1 certificate will reference the Root CA certificate which is the self signed
certificate and whose public key will be stored inside our operating system. The client will verify the signature of Root CA using its
public key and once it is verified it can now trust the Tier 1 ceritificate along with Tier 1 public key. Now this public key will be used
to verify the digital signature of Tier 1 that was sent by server to the client originally.
So as there are more level of tiers and hierarchies, all the dependent and linked certificates will be downloaded for verification purposes.

In a nutshell a TLS/SSL Handshake looks like this,
  .The client when wants to establish a secure connection with server, sends server a hello reuqest and includes the encryption algorithm
   it can support
  .The server sends back response with the digital certificate along with encryption algorithm it can support.
  .Client and server agrees on some algorithm and client will then verify the certificate.
  .After verification, the public key of server will be retrieved by client and it can now trust the identity of client
  .Client will now generate a symmetric key, encrypt it using server's public key and send it to the server
  .The server will decrypt that key using its private key and now the communication can take place using the symmetric key.
  
The client direct communication is with Load Balancer so we normally establish secure connection witht he LB which further routes the
request to web application. We can have multiple instances running of Web App so it is not manageable to configure TLS certificate 
at Web App Level. Once the connection is done with LB, the connection is terminated and all intranet connection is done internally in
insecure way as this way of communication is way faster. If there is also a need to setup secure connection even in internal service
communication then we have to manage the self certificates for each services and all other steps will remain same.



Firwalls
--
They are the network components which sits in between our server and external clients. These external clients can be any customer/browser
accessing our application or it can be any other external application which our application needs to communicate with

Firewalls has basic 2 function,
  1) Allow which says what targets are allowed t
  2) Deny which says what targets are denied to access the destination
  
Mainly in 2 ways firewall can be configured
  1) Ingress Config
     .Ingress means the incoming requests to our server from any client
	 .We can configure the range of source ip addresses allowed
	 .We can configure the range of destination ip addresses allowed (there can be multiple server components)
	 .We can configure allowed destination ports and supported protocols like Http, Tcp, etc
	 
  2) Egress Config
     .Egress means the outgoing requests to from server to any external client
	 .External client can be to access internet, any external application
	 .We can configure the range of source ip addresses allowed who can communicate
	 .We can configure the range of destination ip addresses allowed which means to where we can communicate to
	 .We can configure allowed destination ports and supported protocols like Http, Tcp, etc
	 
Example of How we can configure firewall in our system
Lets say our application is running in a netowrk and we have divided our network into 4 subnet which holds a range of ip addresses
  1) DMZ-Subnet 1, where our Web App and LB is set up
  2) DMZ-Subnet 2, where our LB and Gateway service is set up
  3) Service Subnet, where all our backend services are set up
  4) DB Subnet, where all our databases are set up
  
We have also configured that
  .Our Service Subnet can only be access by DMZ-Subnet 2 where the Gateway Service is there
  .DB Subnet can only be accesses by Service Subnet
  .Only DMZ Subnet 1 and DMZ Subnet 2 are accesses by external clients and Service Subnet and DB Subnet are restricted for any external
   communication
  .Only HTTPs protocol is allowed which means SSL/TLS secure connection will be established. Port 443 is allowed only
  .At database level only port 1522 is allowed