@Component
public class AuthorizationHeaderFilter extends AbstractGatewayFilterFactory<AuthorizationHeaderFilter.Config> {

    public AuthorizationHeaderFilter(){
        super(Config.class);
    }

    static class Config{}

    @Override
    public GatewayFilter apply(Config config) {
        return (exchange, chain) -> {
            ServerHttpRequest req = exchange.getRequest();
            if(req.getHeaders().containsKey("Authorization")){
                String token = Objects.requireNonNull(req.getHeaders().get(HttpHeaders.AUTHORIZATION)).get(0);
                if(!isJwtValid(token)) return onError(exchange, "Invalid Token", HttpStatus.UNAUTHORIZED);

            } else return onError(exchange, "No Authorization Header", HttpStatus.UNAUTHORIZED);
            return chain.filter(exchange);
        };
    }

    private Mono<Void> onError(ServerWebExchange exchange, String err, HttpStatus status){
        ServerHttpResponse res = exchange.getResponse();
        res.setStatusCode(status);
        return res.setComplete();
    }

    private boolean isJwtValid(String jwt){
        try{
            String userId = Jwts.parser().setSigningKey("abc123def456").parseClaimsJws(jwt).getBody().getSubject();
            return userId != null && !userId.isEmpty();
        } catch(Exception e){
            return false;
        }
    }
}



Application Property
--
#Mapping For Security

#1 (No Filter For Save Request)
spring.cloud.gateway.routes[0].id=user-save
spring.cloud.gateway.routes[0].uri=lb://user-service
spring.cloud.gateway.routes[0].predicates[0]=Path=/user-service/user/save
spring.cloud.gateway.routes[0].predicates[1]=Method=POST
spring.cloud.gateway.routes[0].filters[0]=RewritePath=/user-service/(?<segment>.*), /$\\{segment}

#2 (No Filter For Login Request)
spring.cloud.gateway.routes[1].id=user-login
spring.cloud.gateway.routes[1].uri=lb://user-service
spring.cloud.gateway.routes[1].predicates[0]=Path=/user-service/login
spring.cloud.gateway.routes[1].predicates[1]=Method=POST
spring.cloud.gateway.routes[1].filters[0]=RewritePath=/user-service/(?<segment>.*), /$\\{segment}

#3 (Every Other Request Should contain Authorization and Custom Filter Will be applied)
spring.cloud.gateway.routes[2].id=user-others
spring.cloud.gateway.routes[2].uri=lb://user-service
spring.cloud.gateway.routes[2].predicates[0]=Path=/user-service/**
spring.cloud.gateway.routes[2].predicates[1]=Method=GET, POST, PUT, DELETE
spring.cloud.gateway.routes[2].predicates[2]=Header=Authorization, (.*)
spring.cloud.gateway.routes[2].filters[0]=RewritePath=/user-service/(?<segment>.*), /$\\{segment}
spring.cloud.gateway.routes[2].filters[1]=AuthorizationHeaderFilter

