Managing Users
--

We can define in memory users with the help of creating @Bean of type InMemoryUserDetailsManager
This is helpful for testing in non-production environment and with this we can remove the default username and password from application.properties.
With InMemoryUserDetailsManager @Bean we can define multiple in memory users to work with.

Example
..
  @Bean
  InMemoryUserDetailsManager userDetails() {
    UserDetails admin = User.withDefaultPasswordEncoder()
        .username("admin")
        .password("admin123")
        .authorities("admin")
        .build();

    UserDetails user = User.withDefaultPasswordEncoder()
        .username("usama")
        .password("usama123")
        .authorities("read")
        .build();

    return new InMemoryUserDetailsManager(admin, user);
  }
  
  @Bean
  PasswordEncoder passwordEncoder(){
    return NoOpPasswordEncoder.getInstance();
  }
..
  
The purpose for PasswordEncoder bean is to tell spring that currently we are using no hashing or encryption to store password in our
database or in-memory. If we return any method for password encoding, spring security will by default use that strategy to match the password.
  

Classes provided by Spring security to manage Users

1) UserDetailsService, an interface that has one abstract method loadUserByUsername()
2) UserDetailsManager, an interface which extends UserDetailsService which has abstract method for managing users like (creating, updating, deleting,
   changePassword, existance of user)
3) InMemoryUserDetailsManager, JdbcUserDetailsManager are the sample implementation classes for UserDetailsManager.

All these classes use UserDetails interface to store User information. User.class is its implementation
DaoAuthenticationProvider makes use of InMemoryUserDetailsManager to loadUserByUsername in the default implementation.

How spring security will know what UserDetailsManager to use?
It will know when we will create the @Bean of it in the security config.
We have created bean for InMemoryUserDetailsManager so it will create users and store it inside a HashMap<>.

Similarly to use JdbcUserDetailsManager, there is already a schema provided by Spring Security to be used with the database
All the users will be stored and retrieved inside the database
All the insert and select queries are written inside JdbcUserDetailsManager
The schema file is users.ddl

There is also one more implementation for UserDetailsManager which is the LdapUserDetailManager for which to use we need to add the dependency
in the pom for ldap-core
This is not something which is used frequently. Only some organizations are there which uses Ldap and Active Directory to store their users.

Once the UserDetails are loaded and checked if user is not expired, account is not locked then these information is converted into 
Authentication object which only holds the information related to the authentication like is user authenticated and what are the roles.
This authentication is used by the filters and all other classes.

For JdbcUserDetailsManager, we will need to install mysql and create the tables and schema and insert sample use records
Then to configure that we will need to,
   .Add dependency in pom for starter-jdbc and mysql-connector
   .Configure spring datasource in application properties.
   .Create @Bean of type JdbcUserDetailsManager
   
To create the bean we simply pass the Datasource in the constructor provided by Spring Security
Example
..
  @Bean
  UserDetailsManager userDetails(DataSource dataSource){
    return new JdbcUserDetailsManager(dataSource);
  }
..

Thats what we can do for simple and demo projects but obviously there is a need where we want our custom tables and custom authentication logics.
For that what we can do is create our own table and write custom implementation for UserDetailsService.
Example
..
  @Service
  public class CustomAuthService implements UserDetailsService {
    
	private final CustomerRepository customerRepo;
	
	public CustomAuthService(CustomerRepository customerRepo){
	  this.customerRepo = customerRepo;
	}
	
	@Override
	public UserDetails loadUserByUsername(String email) throws UsernameNotFoundException{
	  Customer c = customerRepo.findByEmail(email).orElseThrow(() -> new UsernameNotFoundException("User Not Found"));
	  String username = c.getEmail();
	  String pwd = c.getPassword();
	  
	  List<GrantedAuthorities> authorities = new ArrayList<>();
	  authorities.add(new SimpleGrantedAuthority(c.getRole()));
	  
	  return new User(username, pwd, authorities);
	}
  }
..

For simplicity, we just pass a string to assign user role for now.
This will check if the user exists and the UserDetails will be sent back to DaoAuthenticationProvider which will match the password.

We will need to remove all the @Beans created for UserDetailsManager, either for InMemoryUserDetailsManager or JdbcUserDetailsManager in order
to use this custom implementation. If we dont remove it then DaoAuthenticationProvider will check how many UserDetailsManager we have and as of
now we will get 2 implementation which will cause runtime exception.

The reason we implement UserDetailsService and not UserDetailsManager is because we usually involve spring security for authentication purposes
and not for creating users, updating users and checking for expiry and all that which we know that all these methods are available inside the class
UserDetailsManager. So if we implement UserDetailsManager interface in our custom implementation then we need to provide the logic for all these
methods also. We implement UserDetailsService so to only implement method loadUserByUsername and nothing else.

So for registering and updating users, we create new endpoint
Lets say we create a new LoginController and create a @PostMapping endpoint "/register" which takes CustomerEntity as @RequestBody and saves
the user into the database. We need to permitAll() this request also in our security configuration.
As of now spring security will still prevent this request because by default all POST and PUT requests are blocked by spring security because they
are used to modify the data due to CSRF attacks.




Password Management
--

Spring Security provides lots of different password encoders to secure password into the database.
After fetching the user details, the DaoAuthenticationProvider matches the password  by calling method additionalAuthenticationChecks()
This method will check what password encoder is provided and then validates according to it.


Encoding vs Encryption vs Hashing

1) Encoding refers to converting one form of data into some other form using some technique. It is completely reversable and does not involve any
   secret key. Encoding can be done using ASCII, Base64, UNICODE etc. It is typically used to compress the data like large files, videos, mp3s etc
   
2) Encryption refers to transforming of data that guarentees confidentiality. It involves a secret key and an algorithm to secure the data.
   If the algorithm is known then data can still be confidential as secret key is kept private. But if key is leaked then data can be reversible.
   It is typically used to store database credentials and data that is not user related.
   
3) Hashing refers to transforming data using a mathematical hash function that is not reversable. It is a one time generation and every hash
   generation for a single value will be different.	This is is the industry standatd for keeping passwords of users
   
Some of the PasswordEncoder implementations are,
  1) NoOpPasswordEncoder, which deals password as a plain text and not recommended for production
  2) StandardPasswordEncoder, which uses encryption technique to encode the password but it is kept by spring security just to support legacy 
     already built application on this. It is also not recommended to use this encoder in newer version of the application.
  3) Pbkdf2PasswordEncoder, is also not recommended for prod application though it was secure enough some years back but not currently because
     with advance technologies, hacker with high GPU machine can crack this encoder easily.
  4) BCryptPasswordEncoder, which uses bcrypt hashing algorithm to save the password. This algorithm will use some CPU resources and cycles to 
     perform the instruction and it is not a simple java code that executes in few millis. So a hacker when trying to brute force attack the 
	 password will require very high amount of GPU that is why it is considered safe for production.
  5) SCryptPasswordEncoder, is the advance version of BcryptPasswordEncoer as it demands 2 parameters explicitly. One is the computation power
     and the other is the memory based on the configuration provided for SCryptPasswordEncoder. So it makes hacker life even more tough.
  6) Argon2PasswordEncoder, which is the latest of them all which requires 3 parameters. One is the computation power, second is the memory and
     the third is the multiple threads Or number of cores which makes brute force attack nearly impossible.

We have to know that since SCryptPasswordEncoder and Argon2PasswordEncoder are the 2 most secure then it also compromises performance also
everytime a user registers into app or when he logs in because we will hash the password and match to authenticate.
So most of the time, BcryptPasswordEncoer does the job well because we also restrict users to have password worth 8 to 10 characters including 
characters, numbers and special characters so bcrypt becomes secure enough for production application.

To use BcryptPasswordEncoer we just initialize the bean
Example
..
  @Bean
  public PasswordEncoder passwordEncoder(){
    return new BcryptPasswordEncoder();
  }  
..

The default number of rounds are 10 and the min limit is 4 and max limit is 31
We can also tweek our password encoder to make it more secure like increasing the number of rounds, giving some salt as SecureRandom value.
Check multiple overloaded constructors to use these values.