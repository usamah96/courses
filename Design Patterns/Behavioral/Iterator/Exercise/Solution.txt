import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

class Node<T>
{
  public T value;
  public Node<T> left, right, parent;

  public Node(T value)
  {
    this.value = value;
  }

  public Node(T value, Node<T> left, Node<T> right)
  {
    this.value = value;
    this.left = left;
    this.right = right;

    left.parent = right.parent = this;
  }

  public Iterator<Node<T>> preOrder()
  {
    return new PreOrderIterator(this);
  }
}
class PreOrderIterator<T> implements Iterator<Node<T>> {
	private Node<T> current;
 
	public PreOrderIterator(Node<T> root) {
		this.current = root;
	}
 
	private Node<T> getParentRightChild(Node<T> node) {
		if (node.parent == null)
			return null;
		else {
			if (node.parent.right != null && node.parent.right != node) {
				return node.parent.right;
			} else {
				return getParentRightChild(node.parent);
			}
		}
	}
 
	@Override
	public boolean hasNext() {
		return this.current != null;
	}
 
	@Override
	public Node<T> next() {
		
		Node<T> next = current;
 
		if (current.left != null) {
			current = current.left;
		} else if (current.right != null) {
			current = current.right;
		} else {
			Node<T> nextNode = getParentRightChild(current);
			current = nextNode;
		}
		return next;
	}
}