Angular Internationalization
---

-Handling angular application in multiple languages
-For the element you want to translate we have to add a special attribute to the element 'i18n'

..

<h1 i18n> Hello From Angular </h1>
<button i18n>Edit Button</button>

-Now we will run the 'ng xi18n' command to extract all our transaltion tags into a file
called 'messages.xlf' created by angular itself. This file will contain the transaltion units
of all the tags we have applied this special attribute. The text will contain a unique identifier
used in the future. This unique identifier is created on the basis of the text. If we change
the text, the identifier will be changed.





Understanding the Unique Identifiers

-The unique identifier for every message is a long random string generated by angular itself
-With i18n tag we can also provide 2 things separated by a pipe
   *The meaning of the message (First Part)
   *The description of the message (Second Part)

<h1 i18n="welcom message|Welcom Message From Angular"> Hello From Angular </h1>

-The unique id will be generated based on the text itself and its meaning if provided. The
description part is not considered to be part of the identifier.

-Also we can give our own identifier to a text but it is not recommended to do so as giving
unique id to all the text in application is a tedious task. We should rely on angular for this 
functionality.
-At the end of the string give unique id with double @ sign at the start
..
<h1 i18n="welcom message|Welcom Message From Angular@@welcomMessage"> Hello From Angular </h1>

-Now instead of the random long string id, 'welcomMessage' will be considered as a unique id







Angular i18n Pluralization Support

-We can write conditional statements with Angular Internationalization
-Like if we have an array and we want to display the total count if the count is greater
than 1, display No content if count is 0 etc.

Inside TS file
..
testArr = [1,2,3,4,5];
testArrLength = this.testArr.length;

Inside HTML file

<div i18n> { 
           testArrLength, plural, =0 {No Content} =1 {One Content} 
           other {A total of {{testArrLength}} content} 
           } 
</div>







Alternative Expression Support

-We can re-write our switch case statements with i18n support like
..

<div class="category" i18n>
  {
    course.category,
    select,
    BEGINNER {Beginner},
    INTERMEDIATE {Intermediate},
    ADVANCED {Advanced}
  }
</div>

-The select clause here tells that one of the selection will be applicable
-If the course.category is BEGINNER then Beginner will be displayed and so on.....

-In this way we can extract this in messages.xlf file with ng xi18n command and then tell
the translator in a more user friendly way about its translation






Translating The Application

-For example we want to translate our application to french then when extracting the
messages.xlf file we will specify the localte type as 'ng xi18n --i18n-locale fr'. This
will set the locale to fr in the messages file.

-Now inside the messages file, all the texts will be under the <source> tag on which we have
applied the i18n tag like
..
<h1 i18n> Welcome To Angular </h1>
This will be displayed as
<source> Welcome To Angular </source>

-We have to provide the translation in the relevant language (french in this case) under
the <target> tag like
..
<source> Welcome To Angular </source>
<target>Bienvenue chez Angular</target>

-This is to be done for all the source tag

-Now inside angular.json file we want to specify the configuration for production
-Under configuration property
..
"fr": {
  "aot": true,
  "outputPath": "dist/angular-course-fr",
  "i18nFile": "src/locale/messages.xlf",
  "i18nFormat": "xlf",
  "i18nLocale": "fr",
  "i18nMissingTranslation": "error"
}

This configuration tells that whenever the production build is made with this configuration
provide the project files inside angular-course-fr folder, find the messages file under
src/locale and if any translation <source> is missing the <target> tag throw compile time error.

-Also under the serve property, under configuration property add
..
"fr": {
  "browserTarget": "angular-course:build:fr"
}

This means that whenever ng serve is run with fr configuration, find the configuration under
build > fr property and execute that.
-The build > fr property is the same location we have applied configuration for production