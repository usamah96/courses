Many To Many Relationship
---

Defining the relationships between Student and Courses
..
public class Student{
  ..
  ..
  @ManyToMany
  private List<Course> courses
}

public class Course{
  ..
  ..
  @ManyToMany
  private List<Student> students
}

-With these impementation, 2 tables will be created student_courses and course_students since both entities have @ManyToMany which is
a wrong implementation
-We have to make one of the side the owning side
-Use mappedBy attribute at the non-owning side of the entity
-We can customize our JoinTable / BridgeTable by the use of @JoinTable
-Add the name property to change the name of the table
-Add the joinColumn and inverseJoinColumn attribute to change the column name

@ManyToMany
@JoinTable(name = "student_course", joinColumn = @JoinColumn(name = "student_id"), inverseJoinColumn = @JoinColumn("course_id"))
private List<Course> courses;

@ManyToMany(mappedBy = "courses")
private List<Student> students;